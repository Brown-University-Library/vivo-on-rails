<% if edit_allowed() %>
<script type="text/javascript">
  $(function() {
    $("#edit-profile").on("click", function() {
      window.location = "<%= display_show_path(@presenter.faculty.vivo_id, {mode:'edit'}) %>";
    });
  });
</script>
<% end %>

<% if @presenter.edit_mode %>
<script type="text/javascript">
  $(function() {

    //////////////////////////////////////////
    // Common functions
    //////////////////////////////////////////

    var showError = function(section, message) {
      alert(section + ": " + message);
    }

    var turnTextArea = function(id, value) {
      var id1 = "#" + id + "Text";
      var id2 = "#" + id + "EditButton";
      var id3 = "#" + id + "EditBox"
      if (value == true) {
        $(id1).addClass("hidden");
        $(id2).addClass("hidden");
        $(id3).removeClass("hidden");
      } else {
        $(id1).removeClass("hidden");
        $(id2).removeClass("hidden");
        $(id3).addClass("hidden");
      }
    }

    var setupTextArea = function(id, url, editor) {

      // setup the edit button for this text area
      $("#" + id + "EditButton").on("click", function() {
          // push the text content to the text area value
          var oldContent = $("#" + id + "Text").first().html();
          editor.setData(oldContent);
          turnTextArea(id, true);
      });

      // setup the save button for this text area
      $("#" + id + "Save").on("click", function() {
        var newContent = editor.getData()
        turnTextArea(id, false);
        $.ajax({
            type: "POST",
            url: url.replace("{vivoId}", vivoId),
            data: {text: newContent},
            success: function(data) {
              $("#" + id + "Text").first().html(data.text);
              console.log("updated " + id + " for " + vivoId);
            },
            error: function(xhr) {
              showError("Error updating " + id, xhr.responseJSON.error);
            }
          });
      });

      // setup the cancel button for this text area
      $("#" + id + "Cancel").on("click", function() {
        turnTextArea(id, false);
      });
    };


    //////////////////////////////////////////
    // Research Areas
    //////////////////////////////////////////

    // Source for autocomplete code: https://jqueryui.com/autocomplete/#remote
    $('#researchareaText').autocomplete({
      source: function(request, response) {
        $.ajax({
          url: rootUrl + "/edit/fast/search?text=" + request.term,
          success: function(payload) {
            // payload.data must have the following structure:
            // [{id: x, label: y, value: z}]
            response(payload.data);
          }
        });
      },
      minLength: 3,
			select: function(event, ui) {
				$('#researchareaText').val(ui.item.label);
				$('#researchareaId').val(ui.item.id);
			}
		});

    $('#researchareaText').on('keypress',function(e) {
      if(e.which == 13) {
        $("#researchareaAddButton").click();
      }
    });

    $("#research-areas-list").on("click", ".delete_research_area", function(el) {
      // source: https://stackoverflow.com/a/15420578/446681
      var idDelete = "#" + el.target.parentNode.id;
      var idLink = idDelete.replace("_delete", "");
      var id = idLink.replace("#", "");
      $.ajax({
        type: "POST",
        url: rootUrl + "/edit/research_area/" + vivoId + "/delete?id=" + id,
        success: function(x) {
          $(idDelete).addClass("hidden");
          $(idLink).addClass("hidden");
        },
        error: function(xhr) {
          showError("Error adding research area", xhr.responseJSON.error);
        }
      });
    });

    var researchAreaAddElement = function(id, text) {
      var href= "http://vivo.brown.edu/search?fq=research_areas|" + text;
      var span = '<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>';
      var link1 = '<a href="' + href + '" id="' + id + '">' + text + '</a>';
      var link2 = '<a href="#" class="delete_research_area" id="' + id + '_delete" >' + span + '</a>';
      var html = '| ' + link1 + ' ' + link2;
      $("#research-areas-list").append(html);
      $("#researchareaText").val("");
      $("#researchareaId").val("");
    };

    $("#researchareaAddButton").on("click", function(el) {
      var text = $('#researchareaText').val();
      if (text.trim() == "") {
        return;
      }
      $.ajax({
        type: "POST",
        url: rootUrl + "/edit/research_area/" + vivoId + "/add?text=" + text,
        success: function(data) {
          console.log("added " + data.id + " for " + vivoId);
          researchAreaAddElement(data.id, text);
        },
        error: function(xhr) {
          showError("Error adding research area", xhr.responseJSON.error);
        }
      });
    });


    //////////////////////////////////////////
    // On the web
    //////////////////////////////////////////
    $("#on-the-web-list").on("click", ".delete_item_link", function(el) {
      var id1 = el.target.parentNode.id;
      var id2 = id1.replace("_delete", "");
      var payload = {id: id2};
      $.ajax({
        type: "POST",
        url: rootUrl + "/edit/web_link/" + vivoId + "/delete",
        dataType: "json",
        data: payload,
        success: function(data) {
          console.log("delete " + id2 + " for " + vivoId);
          $("#" + id1).addClass("hidden");
          $("#" + id2).addClass("hidden");
        },
        error: function(xhr) {
          showError("Error updating research area", xhr.responseJSON.error);
        }
      });
    });

    var onTheWebAddElement = function(id, text, url, icon) {
      var img, link, buttonEdit, spanDelete, linkDelete, html;
      if (icon == "") {
        img = '<span class="glyphicon glyphicon-link" aria-hidden="true"></span>';
      } else {
        img = '<img src="' + icon + '" alt="" width="17" />';
      }
      link = '<a id="{id}_link" href="{url}" target="_blank">{text}</a>'
      buttonEdit = '<button id="{id}_edit" class="btn btn-xs btn-info ontheweb_edit_button" data-toggle="modal" data-target="#ontheweb_modal">Edit</button>';
      spanDelete = '<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>';
      linkDelete = '<a href="#" id="{id}_delete" class="delete_item_link" title="Remove this link">' + spanDelete + '</a>';
      html = '<li id="{id}">' + img + link + buttonEdit + linkDelete + '</li>';
      html = html.replace(/{id}/g, id);
      html = html.replace('{text}', text);
      html = html.replace('{url}', url);
      $("#on-the-web-list").append(html);
    };

    $("#ontheweb_modal_save").on("click", function(el) {
      var url = $("#ontheweb_modal_url").val();
      var text = $("#ontheweb_modal_text").val();
      var id = $("#ontheweb_modal_id").val();
      var payload = {text: text, url: url, rank: "0", id: id};
      $.ajax({
        type: "POST",
        url: rootUrl + "/edit/web_link/" + vivoId + "/save",
        dataType: "json",
        data: payload,
        success: function(data) {
          var elemId = "#" + data.id + "_link";
          console.log("save " + data.id + " for " + vivoId);
          if ($(elemId).length == 1) {
            // update the existing HTML elements for this id
            $(elemId).attr("href", data.url);
            $(elemId).text(data.text);
          } else {
            // add a new set of HTML elements for this id
            onTheWebAddElement(data.id, data.text, data.url, "");
          }
        },
        error: function(xhr) {
          showError("Error updating web link", xhr.responseJSON.error);
        }
      });

      $('#ontheweb_modal').modal('hide');
    });

    $("#ontheweb_modal_cancel").on("click", function(el) {
      $('#ontheweb_modal').modal('hide');
    });

    $("#ontheweb_modal").on("shown.bs.modal", function(el) {

      // Makes sure tabstops stay within the modal form.
      // Source https://stackoverflow.com/a/21811463/446681
      var firstInput = $("#ontheweb_modal_text");
      var lastInput = $("#ontheweb_modal_cancel");
      lastInput.on('keydown', function (e) {
        if ((e.which === 9 && !e.shiftKey)) {
          e.preventDefault();
          firstInput.focus();
        }
      });
      firstInput.on('keydown', function (e) {
        if ((e.which === 9 && e.shiftKey)) {
          e.preventDefault();
          lastInput.focus();
        }
      });

      var editId = el.relatedTarget.id;
      if (editId == "onthewebAddButton") {
        // Empty the values to let the form offer the placeholder values
        $("#ontheweb_modal_text").val("");
        $("#ontheweb_modal_url").val("");
        $("#ontheweb_modal_id").val("new-id");
      } else {
        var id = editId.replace("_edit", "");
        var link = $("#" + id + "_link");
        $("#ontheweb_modal_text").val(link.first().text());
        $("#ontheweb_modal_url").val(link.first().attr("href"));
        $("#ontheweb_modal_id").val(id);
      }
      $("#ontheweb_modal_text").focus();
    });

    //////////////////////////////////////////
    // Initialization
    //////////////////////////////////////////

    // References:
    //    http://cdn.ckeditor.com/
    //    https://ckeditor.com/docs/ckeditor4/latest/guide/dev_installation.html
    //    https://ckeditor.com/docs/ckeditor4/latest/examples/basicstyles.html
    //    https://ckeditor.com/docs/ckeditor4/latest/examples/toolbar.html
    var ckeditConfig = {
      toolbar: [
        { name: 'basicstyles', items: [ 'Bold', 'Italic' ] },
        { name: 'paragraph', items: [ 'NumberedList', 'BulletedList'] },
        { name: 'links', items: [ 'Link', 'Unlink' ] },
        { name: 'about', items: [ 'About' ] }
      ],
      removePlugins: 'elementspath'
    };

    // Setup the edit boxes to use the CKEditor
    CKEDITOR.replace('overviewTextArea', ckeditConfig);
    CKEDITOR.replace('researchOverviewTextArea', ckeditConfig);
    CKEDITOR.replace('researchStatementTextArea', ckeditConfig);

    // Setup the edit/save/cancel logic for the edit boxes
    setupTextArea("overview", rootUrl + "/edit/overview/{vivoId}/update", CKEDITOR.instances.overviewTextArea);
    setupTextArea("researchOverview", rootUrl + "/edit/research/overview/{vivoId}/update", CKEDITOR.instances.researchOverviewTextArea);
    setupTextArea("researchStatement", rootUrl + "/edit/research/statement/{vivoId}/update", CKEDITOR.instances.researchStatementTextArea);

    // Add the Research Areas and Web Links to the page.
    // (we don't  need to encode the values before passing them to the
    // JavaScript functions, Rails takes care of that.)
    <% @presenter.faculty.research_areas.each do |area| %>
      researchAreaAddElement("<%= area.id %>", "<%= area.label %>");
    <% end %>

    <% @presenter.faculty.on_the_web.each do |web| %>
      onTheWebAddElement("<%= web.vivo_id %>", "<%= web.text %>", "<%= web.url %>", "<%= asset_path(web.icon) %>");
    <% end %>

    // Make sure the textboxes start empty. This is to prevent
    // them from keeping previous values if the user refreshes
    // the browser.
    $('#researchareaText').val("");
    $("#ontheweb_modal_url").val("");
    $("#ontheweb_modal_text").val("");

    $("#edit-profile").on("click", function() {
      window.location = "<%= display_show_path(@presenter.faculty.vivo_id, {mode:'edit'}) %>";
    });

    $("#edit-profile").addClass("hidden");
  });
</script>
<% end %>
