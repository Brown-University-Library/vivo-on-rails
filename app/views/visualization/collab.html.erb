<% @page_title = (@presenter.faculty.name || "") + " Collaborator network"%>

<%= render "visualization/viz_style" %>
<%= render "visualization/viz_javascript" %>
<%= render "search_box" %>

<h1 class="researcherName"><%= @presenter.faculty.display_name %></h1>
<h3 class="facultyTitle"><%= @presenter.faculty.title %></h2>

<div class="row">
  <div class="col-md-9">
    <div id="descriptionMsg">
      The collaborator network is created with the information provided by this
      researcher under the
      <a href="<%= display_show_path(@presenter.faculty.vivo_id) %>#Affiliations">Affiliations tab of their profile</a>.
      The collaborator network for this researcher was calculated on <span id="txtLastUpdated"></span>.
    </div>
    <div id="errorMsg" class="hidden">
      <div class="alert alert-danger" role="alert">
        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
        <span class="sr-only">Error:</span>
        No collaboration data is available for this researcher.
      </div>
      <p>If this is your profile you can define collaborators via the
        <a target="_blank" href="https://vivo.brown.edu/manager">manager</a> to power this visualization.
      </p>
    </div>
    <div class="btn-group btn-group" role="group" aria-label="...">
      <div class="btn-group" role="group">
        <button id="showLess" type="button" class="btn btn-info" title="Include only direct collaborators.">Show Collaborators</button>
      </div>
      <div class="btn-group" role="group">
        <button id="showMore" type="button" class="btn btn-default" title="Include collaborators and their collaborators">Show Collaborators' Collaborators</button>
      </div>
    </div>
    <div id="loadingMsg">
      <button class="btn btn-lg btn-warning"><span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Loading visualization...</button>
    </div>
    <svg id="svgElement" width="960" height="700" xmlns="http://www.w3.org/2000/svg"></svg>
  </div>
  <div class="col-md-3">
    <a class="btn btn-default btn-lg" role="button" href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id) %>" >Coauthor Network</a>
    <a class="btn btn-default btn-lg" role="button" href="<%= visualization_coauthor_treemap_path(@presenter.faculty.vivo_id) %>" >Coauthor Treemap</a>
    <a class="btn btn-primary btn-lg" role="button" href="<%= visualization_collab_path(@presenter.faculty.vivo_id) %>" >Collaborator Network</a>
    <p>&nbsp;</p>
    <div id="legend">
    <p><b>Legend</b></p>
    <ul id="legendList" class="legend">
      <!-- added via JavaScript -->
    </ul>
    </div>
    <p><b>Options</b></p>
    <p><a href="<%= display_show_path(@presenter.faculty.vivo_id) %>">Go to Researcher's Profile</a></p>
    <p>Show labels&nbsp;<input id="showLabels" type="checkbox" checked/></p>
    <p>Show details on mouse hover&nbsp;<input id="showDetails" type="checkbox" checked/></p>
    <p>Force to fit&nbsp;<input id="forceToFit" type="checkbox" title="Forces the graph to fit on the screen (useful when some nodes fall outside the display area)"/></p>
    <p><b>Data</b></p>
    <p><a href="<%= visualization_collab_path(@presenter.faculty.vivo_id, :format => :csv) %>"
      title="Format suitable for Excel and tools."
      target="_blank">Download data (CSV)</a></p>
    <p><a href="<%= visualization_collab_path(@presenter.faculty.vivo_id, :format => :json) %>"
      title="Format suitable for D3 and other visualization tools."
      target="_blank">Download data (JSON)</a></p>
    <p><a href="#" id="embedHtml" title="Shows HTML to embed the graph as an SVG element into your own page.">Embed SVG Code</a></p>
    <p><a href="#" id="downloadPng" title="Downlods the graph as an image file in PNG format. This only works in Chrome and Firefox.">Download Image (PNG)</a></p>
  </div>
</div>

<div class="row hidden" id="canvasDiv">
  <canvas id="canvasElement"></canvas>
  <a id="canvasImgLink" href="#" download="collaborators.png" target="_blank"></a>
</div>

<div class="row hidden" id="embedHtmlDiv">
  <div class="col-md-12">
    <p>Copy the following HTML to embed the SVG into your own page</p>
    <textarea id="embedHtmlText" rows="15" class="htmlSnippet"></textarea>
  </div>
  <div><p>&nbsp;</p></div>
</div>

<div id="tooltip" class="hidden">
  <p id="title" style="margin:0;"></p>
  <p id="subtitle" style="margin:0;"></p>
  <p id="subtitle2" style="margin:0;"></p>
</div>

<script>

  var facultyId = "<%= @presenter.faculty.id %>";     // http://vivo.brown.edu/jcarberry
  var vivoId = "<%= @presenter.faculty.vivo_id %>";   // jcarberry
  var jsonDataUrl = "<%= visualization_collab_path(@presenter.faculty.vivo_id, :format => :json) %>";
  var svgWidth = 960;
  var svgHeight = 700;
  var theData = null;
  var showMore = false;
  var lastUpdated = null;

  $(document).ready(function() {
    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      $("#forceToFit").attr("checked", true);
    }

    $.getJSON(jsonDataUrl, function(data, status) {
      theData = data.graph; // save the data in our global variable
      lastUpdated = new Date(data.updated);
      drawGraph();
    });

    $("#showMore").on("click", function() { showMore = true; drawGraph(); return false; });
    $("#showLess").on("click", function() { showMore = false; drawGraph(); return false;});

    $("#showLabels").on("click", updateLabels);
    $("#forceToFit").on("click", function() {
      var checked = $("#forceToFit").is(":checked");
      var newUrl = "<%= visualization_collab_path(@presenter.faculty.vivo_id) %>";
      if (checked) {
        newUrl += "?fit=1";
      }
      window.location.assign(newUrl);
    });

    $("#embedHtml").on("click", function() {
      showEmbedHtml("svgElement", svgWidth, svgHeight, "embedHtmlDiv", "embedHtmlText");
    });

    $("#downloadPng").on("click", function() {
      downloadPng("svgElement", svgWidth, svgHeight,
        "canvasElement", "canvasImgLink", "collabs_" + vivoId + ".png");
    });
  });

  function updateLabels() {
    var showLabels = $("#showLabels").is(":checked");
    if (showLabels) {
      d3.selectAll(".node-text").classed("hidden",false);
    } else {
      d3.selectAll(".node-text").classed("hidden",true);
    }
  }

  function drawGraph() {
    var data = theData;
    $("#loadingMsg").addClass("hidden");

    if (data === undefined || data.links === undefined || data.links.length == 0) {
      $("#errorMsg").removeClass("hidden");
      $("#showMore").addClass("hidden");
      $("#showLess").addClass("hidden");
      return; // bail out
    }

    if (isValidDate(lastUpdated)) {
      $("#txtLastUpdated").text(lastUpdated.toLocaleDateString('en-US', { timeZone: 'UTC' }));
    } else {
      $("#txtLastUpdated").text("(not available)");
    }

    if (showMore) {
      $("#showMore").addClass("btn-info");
      $("#showMore").removeClass("btn-default");
      $("#showLess").addClass("btn-default");
      $("#showLess").removeClass("btn-info");
    } else {
      $("#showMore").addClass("btn-default");
      $("#showMore").removeClass("btn-info");
      $("#showLess").addClass("btn-info");
      $("#showLess").removeClass("btn-default");
    }

    var i;
    var svg = d3.select("svg");
    svg.selectAll("*").remove();

    var w = +svg.attr("width");
    var h = +svg.attr("height");

    var nodes = setNodeLevels(data.nodes, data.links, facultyId);
    var edges = calculateEdges(nodes, data.links);
    var allGroups = groupsFromNodes(nodes);
    var showLevel = showMore ? 2 : 1;
    var dataset = datasetByLevel(nodes, edges, data.links, showLevel);
    var colorScheme = d3.scaleOrdinal(d3.schemeCategory20);
    var colors = groupColors(allGroups, colorScheme);
    var nodeColor = function (d) {
      return groupColor(d.group, colorScheme)
    };

    var researcherGroup = groupForNode(nodes, facultyId);
    var researcherColor = groupColor(researcherGroup, colorScheme)
    $(".facultyTitle").css("border-left-color", researcherColor);

    var ul = $("#legendList");
    ul.empty();
    var groupName;
    var groups = groupsFromNodes(dataset.nodes);
    for(i = 0; i < groups.length; i++) {
      groupName = groups[i];
      ul.append('<li><span style="background-color: ' + groupColor(groupName, colorScheme) + ';">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;' + groupName);
    }

    var force = d3.forceSimulation(dataset.nodes)
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(w/2, h/2));

    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      force.force("link", d3.forceLink(dataset.edges));
    } else {
      force.force("link", d3.forceLink(dataset.edges).distance(function(d) {return 100;}).strength(0.1))
    }

    var edges = svg.selectAll("line")
      .data(dataset.edges)
      .enter()
      .append("line")
      .style("stroke", "#ccc")
      .style("stroke-width", 1);

    var dragstarted = function(d) {
      if (!d3.event.active) {
        force.alphaTarget(0.3).restart();
      }
      d.fx = d.x;
      d.fy = d.y;
    }

    var dragged = function(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    var dragended = function (d) {
      if ($("#forceToFit").prop("checked") == true) {
        $("#forceToFit").attr("checked", false);
      }
    }

    var nodes = svg.selectAll("g")
      .data(dataset.nodes)
      .enter()
      .append("g")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    nodes.append("circle")
      .attr("r", function(d) {
        if (d.level == 0) {
          return 15;
        } else if(d.level == 1) {
          return 11;
        }
        return 6;
      })
      .style("fill", nodeColor);

    nodes.on('mouseover', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        // https://stackoverflow.com/a/24041991/446681
        var matrix = this.getScreenCTM().translate(+ this.getAttribute("cx"), + this.getAttribute("cy"));
        var xPos = window.pageXOffset + matrix.e + 15;
        var yPos = window.pageYOffset + matrix.f - 30;
        d3.select("#tooltip")
          .style("left", xPos + "px")
          .style("top", yPos + "px")
          .select("#title")
          .text(d.name);
        d3.select("#subtitle").text(d.group);
        if (d.level == 0) {
          d3.select("#subtitle2").classed("hidden", true);
        } else {
          d3.select("#subtitle2").classed("hidden", false).text("Click to view " + d.name + "'s collaborators");
        }
        d3.select("#tooltip").classed("hidden", false);
      } else {
          d3.select(this).select('text')
            .style("font-weight", "bold")
            .style("font-size", "12px");
      }
      d3.select(this).select('circle').style("fill", "#ffbb78");
    });

    nodes.on('mouseout', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        d3.select("#tooltip").classed("hidden", true);
      } else {
        d3.select(this).select('text')
          .style("font-weight", "normal")
          .style("font-size", "10px");
      }
      d3.select(this).select('circle').style("fill", nodeColor(d, 0));
    });

    nodes.on('click', function(d){
      if (d.level == 0) {
        // do nothing
      } else {
        var shortId = d.id.substring(d.id.lastIndexOf("/")+1);
        var currentSegment = "/display/" + vivoId + "/viz/";
        var newSegment = "/display/" + shortId + "/viz/";
        var newUrl = window.location.toString().replace(currentSegment, newSegment);
        window.location.assign(newUrl);
      }
    });

    nodes.selectAll("circle").on('mouseout', function(d){
      d3.select(this).style("fill", nodeColor(d, 0));
    });

    nodes.append("text")
      .style("font-size", function(d) { return d.level == 0 ? "12px" : "8px"; })
      .style("font-weight", function(d) { return d.level == 0 ? "bold" : "normal"; })
      .attr("class", "node-text")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      nodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
      });
    });

    updateLabels();
  } // function drawGraph() {

</script>
