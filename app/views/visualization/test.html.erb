<% @page_title = (@presenter.faculty.name || "") + " Visualizations"%>

<a class="btn btn-default btn-lg" role="button" href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id) %>" >Co-Author Network</a>
<a class="btn btn-default btn-lg" role="button" href="<%= visualization_chord_path(@presenter.faculty.vivo_id) %>" >Chord Graph</a>
<a class="btn btn-primary btn-lg" role="button" href="<%= visualization_test_path(@presenter.faculty.vivo_id) %>" >Test Network</a>

<style>
  .links line {
    stroke: #999;
    stroke-opacity: 0.6;
  }

  .nodes circle {
    stroke: #fff;
    stroke-width: 1.5px;
  }
</style>

<h1><%= @presenter.faculty.display_name %></h1>
<h2>Co-author network 2</h2>
<h3 id="errorMsg" class="hidden">Sorry, no data is available for this researcher.</h3>
<p>Show labels<input id="showLabels" type="checkbox" checked/></p>

<svg width="960" height="900"></svg>

<p>Download the data as <a href="<%= ENV['VIZ_CLIENT_URL'] %>/forceEdgeGraph/<%= @presenter.faculty.vivo_id %>">JSON</a></p>

<script>

  var faculty_id = "<%= @presenter.faculty.id %>";
  var json_data_addr = "<%= ENV['VIZ_CLIENT_URL'] %>/forceEdgeGraph/<%= @presenter.faculty.vivo_id %>";

  $(document).ready(function() {
    initGraph();
    $("#showLabels").on("click", updateLabels);
  });

  function initGraph() {
    $.getJSON(json_data_addr, drawGraph);
  }

  function inArray(array, value) {
    var i;
    for(i = 0; i < array.length; i++) {
      if (array[i] == value) {
        return true;
      }
    }
    return false;
  }

  function getNodeIndex(nodes, id) {
    var i;
    for(i = 0; i < nodes.length; i++) {
      if (nodes[i].id == id) {
        return i;
      }
    }
    return -1;
  }

  function updateLabels() {
    var x = $("#showLabels").is(":checked");
    if (x) {
      d3.selectAll(".node-text").classed("hidden",false);
      // $(".node-text").removeClass("hidden");
      console.log("showing...");
    } else {
      d3.selectAll(".node-text").classed("hidden",true);
      // $(".node-text").addClass("hidden");
      console.log("hiding...");
    }
  }

  function drawGraph(data, status) {

    var showLabels = $("#showLabels").is(":checked");
    console.log(showLabels);

    var svg = d3.select("svg");
    var w = +svg.attr("width");
    var h = +svg.attr("height");

    var dataset = {
      nodes: [
        {name: "Adam",    id: 0},
        {name: "Bob",     id: 1},
        {name: "Carrie",  id: 2},
        {name: "Dan",     id: 3},
        {name: "Edward",  id: 4},
        {name: "Frances", id: 5}
      ],
      edges: [
        {source: 0, target: 1}, // adam to bob
        {source: 0, target: 2}, // adam to carrie
        {source: 0, target: 3}, // adam to dan
        {source: 1, target: 4}, // bob to edward
        {source: 2, target: 3}  // carrie to dan
      ]
    };

    // set to true to use live data
    if (true) {
      dataset = {nodes: [], edges: []};
      var i;
      for(i = 0; i < data.nodes.length; i++) {
        obj = {id: data.nodes[i].id, name: data.nodes[i].name};
        dataset.nodes.push(obj);
      }

      for(i = 0; i < data.links.length; i++) {
        obj = {
          source: getNodeIndex(data.nodes, data.links[i].source),
          target: getNodeIndex(data.nodes, data.links[i].target)
        };
        dataset.edges.push(obj);
      }
    }

    // init all levels to 2
    for(i = 0; i < dataset.nodes.length; i++) {
      dataset.nodes[i].level = 2;
    }

    // find first level nodes
    var firstLevel = [];
    var edge;
    console.log("First level:")
    for(i = 0; i < dataset.edges.length; i++) {
      edge = dataset.edges[i];
      if (edge.source == 0) {
        firstLevel.push(edge.target);
        console.log(dataset.nodes[edge.target].id);
      }
    }

    // mark the first level nodes
    for(i = 0; i < dataset.edges.length; i++) {
      edge = dataset.edges[i];
      if(inArray(firstLevel, edge.target)) {
        dataset.nodes[edge.target].level = 1;
      }
    }

    // mark the root
    for(i = 0; i < dataset.nodes.length; i++) {
      if (dataset.nodes[i].id == faculty_id) {
        dataset.nodes[i].level = 0;
        break;
      }
    }

    // console.log(dataset.nodes);


    // console.log("NODES");
    // console.log(dataset.nodes);
    //
    // console.log("EDGES..");
    // console.log(dataset.edges);
    //
    // console.log("W: " + w.toString());
    // console.log("H: " + w.toString());

    var colors = d3.scaleOrdinal(d3.schemeCategory10);

    var force = d3.forceSimulation(dataset.nodes)
      .force("charge", d3.forceManyBody())
      .force("link", d3.forceLink(dataset.edges).distance(function(d) {return 100;}).strength(0.1))
      .force("center", d3.forceCenter().x(w/2).y(h/2));


// TODO: see https://stackoverflow.com/questions/40872317/d3-forcesimulation-link-distance

// works
//      .force("link", d3.forceLink(dataset.edges))
//      .force("link", d3.forceLink(dataset.edges).distance(function(d) {return 150;}).strength(0.1))

// does not work
//       .force("link", d3.forceLink().distance(50).id(function(d) { return d.id; }))

// does not work -- seems to be v3 specific
// force.linkDistance(100);


    var edges = svg.selectAll("line")
      .data(dataset.edges)
      .enter()
      .append("line")
      .style("stroke", "#ccc")
      .style("stroke-width", 1);

    var nodes = svg.selectAll("g")
      .data(dataset.nodes)
      .enter()
      .append("g");

    nodes.append("circle")
      .attr("r", function(d) {
        if (d.id == faculty_id) {
          return 10;
        }
        return 5;
      })
      .style("fill", function(d, i) { return colors(d.level); });

      // .style("stroke", "purple")
      // .style("stroke-width", function(d, i) {
      //   if (d.id == faculty_id) {
      //     return 3;
      //   }
      //   return 0;
      // });


    nodes.append("text")
      .style("font-size", "10px")
      .attr("class", "node-text")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      nodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
      });
    });

    updateLabels();
  }

// version 2
// http://jsfiddle.net/pnavarrc/RRUzZ/20/
</script>
