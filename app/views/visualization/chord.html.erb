<% @page_title = (@presenter.faculty.name || "") + " Visualizations"%>

<a class="btn btn-default btn-lg" role="button" href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id) %>" >Co-Author Network</a>
<a class="btn btn-primary btn-lg active" role="button" href="<%= visualization_chord_path(@presenter.faculty.vivo_id) %>" >Chord Graph</a>
<a class="btn btn-default btn-lg" role="button" href="<%= visualization_test_path(@presenter.faculty.vivo_id) %>" >Co-Author V2</a>

<style>
/* body {
  font: 10px sans-serif;
} */

.group-tick line {
  stroke: #000;
}

.ribbons {
  fill-opacity: 0.67;
}

</style>

<h1><%= @presenter.faculty.display_name %></h1>
<h2>Co-author network</h2>
<h3 id="errorMsg" class="hidden">Sorry, no data is available for this researcher.</h3>

<svg width="960" height="960"></svg>

<p>Download the data as <a href="<%= ENV['VIZ_CLIENT_URL'] %>/chordDiagram/<%= @presenter.faculty.vivo_id %>">JSON</a></p>

<script>

$(document).ready(function() {
  var vizUrl = "<%= ENV['VIZ_CLIENT_URL'] %>/chordDiagram/<%= @presenter.faculty.vivo_id %>";
  var req = $.ajax({url: vizUrl, dataType: "json", timeout: 5000});
  req.success(chordGraphDisplay);
  req.error(function(data, status) {
    console.log("Error getting data for chord graph");
  });
});

function chordGraphDisplay(data, status) {
  console.log("Got the data");
  // debugger;
  var matrix = data.matrix;

  var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height"),
      outerRadius = Math.min(width, height) * 0.5 - 40,
      innerRadius = outerRadius - 30;

  var formatValue = d3.formatPrefix(",.0", 1e3);

  var chord = d3.chord()
      .padAngle(0.05)
      .sortSubgroups(d3.descending);

  var arc = d3.arc()
      .innerRadius(innerRadius)
      .outerRadius(outerRadius);

  var ribbon = d3.ribbon()
      .radius(innerRadius);

  var color = d3.scaleOrdinal()
      .domain(d3.range(4))
      .range(["#000000", "#FFDD89", "#957244", "#F26223"]);

  var g = svg.append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
      .datum(chord(matrix));

  var group = g.append("g")
      .attr("class", "groups")
    .selectAll("g")
    .data(function(chords) { return chords.groups; })
    .enter().append("g");

  group.append("path")
      .style("fill", function(d) { return color(d.index); })
      .style("stroke", function(d) { return d3.rgb(color(d.index)).darker(); })
      .attr("d", arc);

  var groupTick = group.selectAll(".group-tick")
    .data(function(d) { return groupTicks(d, 1e3); })
    .enter().append("g")
      .attr("class", "group-tick")
      .attr("transform", function(d) { return "rotate(" + (d.angle * 180 / Math.PI - 90) + ") translate(" + outerRadius + ",0)"; });

  groupTick.append("line")
      .attr("x2", 6);

  groupTick
    .filter(function(d) { return d.value % 5e3 === 0; })
    .append("text")
      .attr("x", 8)
      .attr("dy", ".35em")
      .attr("transform", function(d) { return d.angle > Math.PI ? "rotate(180) translate(-16)" : null; })
      .style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
      .text(function(d) { return formatValue(d.value); });

  g.append("g")
      .attr("class", "ribbons")
    .selectAll("path")
    .data(function(chords) { return chords; })
    .enter().append("path")
      .attr("d", ribbon)
      .style("fill", function(d) { return color(d.target.index); })
      .style("stroke", function(d) { return d3.rgb(color(d.target.index)).darker(); });

}

// Returns an array of tick angles and values for a given group and step.
function groupTicks(d, step) {
  var k = (d.endAngle - d.startAngle) / d.value;
  return d3.range(0, d.value, step).map(function(value) {
    return {value: value, angle: value * k + d.startAngle};
  });
}
</script>
