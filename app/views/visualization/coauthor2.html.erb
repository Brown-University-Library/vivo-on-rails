<% @page_title = (@presenter.faculty.name || "") + " Visualizations"%>

<a class="btn btn-default btn-lg" role="button" href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id) %>" >Co-Author</a>
<a class="btn btn-default btn-lg" role="button" href="<%= visualization_chord_path(@presenter.faculty.vivo_id) %>" >Chord Graph</a>
<a class="btn btn-primary btn-lg" role="button" href="<%= visualization_coauthor2_path(@presenter.faculty.vivo_id) %>" >Co-Author V2</a>

<style>
  .links line {
    stroke: #999;
    stroke-opacity: 0.6;
  }

  .nodes circle {
    stroke: #fff;
    stroke-width: 1.5px;
  }

  #tooltip {
    position: absolute;
    padding: 10px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    pointer-events: none;
  }

  #title {
    font-weight: bold;
  }

  #subtitle2 {
    font-size: small;
    font-style: italic;
  }
</style>

<%= render "search_box" %>

<h1><%= @presenter.faculty.display_name %></h1>
<h2>Co-author network (with labels)</h2>
<h3 id="errorMsg" class="hidden">Sorry, no data is available for this researcher.</h3>

<div class="row">
  <div class="col-md-9">
    <svg width="960" height="700"></svg>
  </div>
  <div class="col-md-3">
    <p><b>Legend</b></p>
    <p><span style='background-color:#1f77b4;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Author</p>
    <p><span style='background-color:#aec7e8;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Coauthors</p>
    <p><span style='background-color:#c7c7c7;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Coauthors' coauthors</p>
    <p>&nbsp;</p>
    <p><b>Options</b></p>
    <p><a href="<%= display_show_path(@presenter.faculty.vivo_id) %>">Go to Researcher's Profile</a></p>
    <p>Show labels<input id="showLabels" type="checkbox" checked/></p>
    <p>Show details on mouse hover<input id="showDetails" type="checkbox" checked/></p>
    <p>Force to fit<input id="forceToFit" type="checkbox"/></p>
    <p><a href="<%= ENV['VIZ_CLIENT_URL'] %>/forceEdgeGraph/<%= @presenter.faculty.vivo_id %>">Download data (JSON)</a></p>
  </div>
</div>

<div id="tooltip" class="hidden">
  <p id="title"></p>
  <p id="subtitle"></p>
  <p id="subtitle2"></p>
</div>


<script>

  var facultyId = "<%= @presenter.faculty.id %>";     // http://vivo.brown.edu/jcarberry
  var vivoId = "<%= @presenter.faculty.vivo_id %>";   // jcarberry
  var json_data_addr = "<%= ENV['VIZ_CLIENT_URL'] %>/forceEdgeGraph/<%= @presenter.faculty.vivo_id %>";

  $(document).ready(function() {
    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      console.log("force to fit defaulted to true");
      $("#forceToFit").attr("checked", true);
    }

    initGraph();

    $("#showLabels").on("click", updateLabels);
    $("#forceToFit").on("click", function() {
      console.log("force to fit clicked");
      var checked = $("#forceToFit").is(":checked");
      var newUrl = "<%= visualization_coauthor2_path(@presenter.faculty.vivo_id)%>";
      if (checked) {
        newUrl += "?fit=1";
      }
      window.location.assign(newUrl);
    });
  });

  function initGraph() {
    $.getJSON(json_data_addr, drawGraph);
  }

  function inArray(array, value) {
    var i;
    for(i = 0; i < array.length; i++) {
      if (array[i] == value) {
        return true;
      }
    }
    return false;
  }

  function getNodeIndex(nodes, id) {
    var i;
    for(i = 0; i < nodes.length; i++) {
      if (nodes[i].id == id) {
        return i;
      }
    }
    return -1;
  }

  function updateLabels() {
    var showLabels = $("#showLabels").is(":checked");
    if (showLabels) {
      d3.selectAll(".node-text").classed("hidden",false);
      console.log("showing...");
    } else {
      d3.selectAll(".node-text").classed("hidden",true);
      console.log("hiding...");
    }
  }

  function nodeColor(d, i) {
    if (d.level == 0) {
      return "#1f77b4"; // blue
    } else if(d.level ==1) {
      return "#aec7e8"; // light blue
    }
    return "#c7c7c7";   // light gray
  }

  function drawGraph(data, status) {
    var i;
    var svg = d3.select("svg");
    var w = +svg.attr("width");
    var h = +svg.attr("height");
    var dataset = {nodes: data.nodes, edges: []};

    // calculate the edges from the data
    for(i = 0; i < data.links.length; i++) {
      obj = {
        source: getNodeIndex(data.nodes, data.links[i].source),
        target: getNodeIndex(data.nodes, data.links[i].target)
      };
      dataset.edges.push(obj);
    }

    // set all nodes to level 2 initially
    //
    // level 0 - author
    // level 1 - coauthor
    // level 2 - coauthor's coauthor
    for(i = 0; i < dataset.nodes.length; i++) {
      dataset.nodes[i].level = 2;
    }

    // find first level nodes
    var rootIndex = getNodeIndex(data.nodes, facultyId);
    var firstLevel = [];
    var edge;
    for(i = 0; i < dataset.edges.length; i++) {
      edge = dataset.edges[i];
      if (edge.source == rootIndex) {
        firstLevel.push(edge.target);
      } else if(edge.target == rootIndex) {
        firstLevel.push(edge.source);
      }
    }

    // mark the first level nodes
    for(i = 0; i < dataset.edges.length; i++) {
      edge = dataset.edges[i];
      if(inArray(firstLevel, edge.target)) {
        dataset.nodes[edge.target].level = 1;
      } else if(inArray(firstLevel, edge.source)) {
        dataset.nodes[edge.source].level = 1;
      }
    }

    // mark the root
    for(i = 0; i < dataset.nodes.length; i++) {
      if (dataset.nodes[i].id == facultyId) {
        dataset.nodes[i].level = 0;
        break;
      }
    }

    var colors = d3.scaleOrdinal(d3.schemeCategory10);

    var force = d3.forceSimulation(dataset.nodes)
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(w/2, h/2));

    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      console.log("Force to fit: yes");
      force.force("link", d3.forceLink(dataset.edges));
    } else {
      console.log("Force to fit: no");
      force.force("link", d3.forceLink(dataset.edges).distance(function(d) {return 100;}).strength(0.1))
    }

    var edges = svg.selectAll("line")
      .data(dataset.edges)
      .enter()
      .append("line")
      .style("stroke", "#ccc")
      .style("stroke-width", 1);
      // .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

    var dragstarted = function(d) {
      if (!d3.event.active) force.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    var dragged = function(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    var dragended = function (d) {
      return;
      if (!d3.event.active) force.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }

    var nodes = svg.selectAll("g")
      .data(dataset.nodes)
      .enter()
      .append("g")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    nodes.append("circle")
      .attr("r", function(d) {
        if (d.level == 0) {
          return 15;
        } else if(d.level == 1) {
          return 10;
        }
        return 5;
      })
      .style("fill", nodeColor);

    nodes.on('mouseover', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        // https://stackoverflow.com/a/24041991/446681
        var matrix = this.getScreenCTM().translate(+ this.getAttribute("cx"), + this.getAttribute("cy"));
        var xPos = window.pageXOffset + matrix.e + 15;
        var yPos = window.pageYOffset + matrix.f - 30;
        d3.select("#tooltip")
          .style("left", xPos + "px")
          .style("top", yPos + "px")
          .select("#title")
          .text(d.name);
        d3.select("#subtitle").text(d.group);
        d3.select("#subtitle2").text("Click to view " + d.name + "'s coauthors");
        d3.select("#tooltip").classed("hidden", false);
      } else {
          d3.select(this).select('text')
            .style("font-weight", "bold")
            .style("font-size", "12px");
      }
      d3.select(this).select('circle').style("fill", "#ffbb78");
    });

    nodes.on('mouseout', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        d3.select("#tooltip").classed("hidden", true);
      } else {
        d3.select(this).select('text')
          .style("font-weight", "normal")
          .style("font-size", "10px");
      }
      d3.select(this).select('circle').style("fill", nodeColor(d, 0));
    });

    nodes.on('click', function(d){
      var shortId = d.id.substring(d.id.lastIndexOf("/")+1);
      var currentSegment = "/display/" + vivoId + "/viz/";
      var newSegment = "/display/" + shortId + "/viz/";
      var newUrl = window.location.toString().replace(currentSegment, newSegment);
      window.location.assign(newUrl);
    });

    nodes.selectAll("circle").on('click', function(d){
      var shortId = d.id.substring(d.id.lastIndexOf("/")+1);
      var currentSegment = "/display/" + vivoId + "/viz/";
      var newSegment = "/display/" + shortId + "/viz/";
      var newUrl = window.location.toString().replace(currentSegment, newSegment);
      window.location.assign(newUrl);
    });

    nodes.selectAll("circle").on('mouseout', function(d){
      d3.select(this).style("fill", nodeColor(d, 0));
    });

    nodes.append("text")
      .style("font-size", function(d) { return d.level == 0 ? "12px" : "8px"; })
      .style("font-weight", function(d) { return d.level == 0 ? "bold" : "normal"; })
      .attr("class", "node-text")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      nodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
      });
    });

    updateLabels();
  } // function drawGraph() {


</script>
