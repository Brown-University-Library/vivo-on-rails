<% @page_title = (@presenter.organization.name || "") + " Collaborator network"%>

<style>
  .links line {
    stroke: #999;
    stroke-opacity: 0.6;
  }

  .nodes circle {
    stroke: #fff;
    stroke-width: 1.5px;
  }

  /* Force left alignment https://github.com/Brown-University-Library/vivo-on-rails/pull/27/files */
  .researcherName {
    clear: both;
    text-align: left;
  }

  #tooltip {
    position: absolute;
    padding: 5px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    pointer-events: none;
  }

  #title {
    font-weight: bold;
  }

  #subtitle2 {
    font-size: small;
    font-style: italic;
  }

  .htmlSnippet {
    background-color: #f5f5d3; /* light yellow */
    border:1px solid #999999;
    width:98%;
    margin:5px 0;
    padding:1%;
  }
</style>

<%= render "search_box" %>

<h1 class="researcherName"><%= @presenter.organization.name %></h1>
<h4>Collaborator Network</h4>

<div class="row">
  <div class="col-md-9">
    <div id="descriptionMsg">
      The collaborator network is created with the information provided by each
      researcher associated with this organization. You can view the individual
      collaborator information for a researcher under the Affiliations tab.
    </div>
    <div id="errorMsg" class="alert alert-danger hidden" role="alert">
      <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
      <span class="sr-only">Error:</span>
      No collaboration data is available for this organization.
    </div>
    <div id="loadingMsg">
      <button class="btn btn-lg btn-warning"><span class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span> Loading visualization...</button>
    </div>
    <svg id="svgElement" width="960" height="700" xmlns="http://www.w3.org/2000/svg"></svg>
  </div>
  <div class="col-md-3">
    <p><b>Legend</b></p>
    <div>
      <span style='background-color:#1f77b4;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Member of the organization
    </div>
    <div id="level1Legend">
      <span style='background-color:#6ebced;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Collaborators
      <a id="level1Hide" href="">(hide)</a>
      <a id="level1Show" class="hidden" href="">(show)</a>
    </div>
    <div id="level2Legend">
      <span style='background-color:#92eace;'>&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Collaborators' collaborators
      <a id="level2Hide" href="">(hide)</a>
      <a id="level2Show" class="hidden" href="">(show)</a>
    </div>
    <p>&nbsp;</p>
    <p><b>Options</b></p>
    <p><a href="<%= display_show_path(@presenter.organization.vivo_id) %>">View Organization's Profile</a></p>
    <p>Show members without collaborators&nbsp;<input id="showOrphans" type="checkbox" checked/></p>
    <p>Show labels&nbsp;<input id="showLabels" type="checkbox" checked/></p>
    <p>Show details on mouse hover&nbsp;<input id="showDetails" type="checkbox" checked/></p>
    <p>Force to fit&nbsp;<input id="forceToFit" type="checkbox" title="Forces the graph to fit on the screen (useful when some nodes fall outside the display area)"/></p>
    <p><a href="<%= visualization_collab_path(@presenter.organization.vivo_id, format: :csv) %>"
      title="Format suitable for Excel and other tools."
      target="_blank">Download data (CSV)</a></p>
    <p><a href="<%= visualization_collab_path(@presenter.organization.vivo_id, format: :json) %>"
      title="Format suitable for D3 and other visualization tools."
      target="_blank">Download data (JSON)</a></p>
    <p><a href="#" id="embedHtml" title="Shows HTML to embed the graph as an SVG element into your own page.">Embed SVG Code</a></p>
    <p><a href="#" id="downloadPng" title="Downlods the graph as an image file in PNG format. This only works in Chrome and Firefox.">Download Image (PNG)</a></p>
  </div>
</div>

<div class="row hidden" id="canvasDiv">
  <canvas id="canvasElement"></canvas>
  <a id="canvasImgLink" href="#" download="collaborators.png" target="_blank"></a>
</div>

<div class="row hidden" id="embedHtmlDiv">
  <div class="col-md-12">
    <p>Copy the following HTML to embed the SVG into your own page</p>
    <textarea id="embedHtmlText" rows="15" class="htmlSnippet"></textarea>
  </div>
  <div><p>&nbsp;</p></div>
</div>

<div id="tooltip" class="hidden">
  <p id="title" style="margin:0;"></p>
  <p id="subtitle" style="margin:0;"></p>
  <p id="subtitle2" style="margin:0;"></p>
</div>

<script>

  var facultyId = "<%= @presenter.organization.id %>";     // http://vivo.brown.edu/jcarberry
  var vivoId = "<%= @presenter.organization.vivo_id %>";   // jcarberry
  var jsonDataUrl = "<%= visualization_collab_path(@presenter.organization.vivo_id, format: :json) %>";
  var researcherUrl = "<%= display_show_path('placeholder') %>";
  var svgWidth = 960;
  var svgHeight = 700;
  var numberOfNodes = 0;
  var theData = null;
  var level1Hidden = false;
  var level2Hidden = false;
  var showOrphans = true;

  $(document).ready(function() {
    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      $("#forceToFit").attr("checked", true);
    }

    // Set the variable based on the checkbox. This is required because
    // when reloading the page the checkbox might not be checked.
    showOrphans = $("#showOrphans").is(":checked");

    initGraph();

    $("#level1Hide").on("click", function() { level1Hidden = true; drawGraph(); return false; });
    $("#level1Show").on("click", function() { level1Hidden = false; drawGraph(); return false; });

    $("#level2Hide").on("click", function() { level2Hidden = true; drawGraph(); return false; });
    $("#level2Show").on("click", function() { level2Hidden = false; drawGraph(); return false; });

    $("#showOrphans").on("click", function() { showOrphans = !showOrphans; drawGraph(); });


    $("#showLabels").on("click", updateLabels);
    $("#forceToFit").on("click", function() {
      var checked = $("#forceToFit").is(":checked");
      var newUrl = "<%= visualization_collab_path(@presenter.organization.vivo_id) %>";
      if (checked) {
        newUrl += "?fit=1";
      }
      window.location.assign(newUrl);
    });

    $("#embedHtml").on("click", showEmbedHtml);
    $("#downloadPng").on("click", downloadPng);
  });

  function initGraph() {
    $.getJSON(jsonDataUrl, drawGraphInit);
  }

  function inArray(array, value) {
    var i;
    for(i = 0; i < array.length; i++) {
      if (array[i] == value) {
        return true;
      }
    }
    return false;
  }

  function getNodeIndex(nodes, id) {
    var i;
    for(i = 0; i < nodes.length; i++) {
      if (nodes[i].id == id) {
        return i;
      }
    }
    return -1;
  }

  function updateLabels() {
    var showLabels = $("#showLabels").is(":checked");
    if (showLabels) {
      d3.selectAll(".node-text").classed("hidden",false);
    } else {
      d3.selectAll(".node-text").classed("hidden",true);
    }
  }

  function downloadPng() {
    // The process to download the graphic in the SVG element as an image file
    // is a far more complicated than it looks on the surface. The general
    // process is as follows:
    //
    //  1. Create an HTML IMG element using the raw SVG as its source.
    //  2. Add this image to an HTML canvas.
    //  3. Use the canvas.toBlob() to create binary image (image/png)
    //     out of the SVG that we created on step 1.
    //  4. Force the download of the binary image.
    //
    // Source: http://dinbror.dk/blog/how-to-download-an-inline-svg-as-jpg-or-png/
    var svgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="' + svgWidth + '" height="' + svgHeight + '">\r\n' +
      '<rect width="100%" height="100%" fill="white"/>\r\n' +
      $("#svgElement").html() + '\r\n' +
      '</svg>';
    var svgRaw = "data:image/svg+xml," + encodeURIComponent(svgHtml);

    var canvas = document.getElementById("canvasElement");
    canvas.setAttribute("width", svgWidth);
    canvas.setAttribute("height", svgHeight);

    var ctx = canvas.getContext("2d");
    var svgImage = new Image();

    svgImage.onload = function () {
      // Draw the SVG image inside the canvas
      ctx.drawImage(svgImage, 0, 0, svgWidth, svgHeight);

      // Generate a binary version of the canvas
      canvas.toBlob(function (blob) {
        url = URL.createObjectURL(blob);

        // Tell the browser that is safe to garbage collect the created blob
        // once it has been loaded.
        var pngImg = document.createElement("img");
        pngImg.onload = function () { URL.revokeObjectURL(url); };
        pngImg.src = url;

        // Set the blob URL as the target of our HTML anchor tag...
        var a = document.getElementById("canvasImgLink");
        var fileName = "collaborators_" + vivoId + ".png";
        a.setAttribute("download", fileName);
        a.setAttribute("href", url);

        // ...and force a click event on the HTML anchor tag
        // (this is what prompts the user to safe the image.)
        var clickEvent = new MouseEvent("click", {
          "view": window,
          "bubbles": true,
          "cancelable": true
        });
        a.dispatchEvent(clickEvent);
      }, "image/png", 1);
    }

    svgImage.src = svgRaw;
    return false;
  }

  function showEmbedHtml() {
    // Dump the HTML to a text area element...
    var svgElement = $("#svgElement").html();
    var svgHtml = '<svg width="' + svgWidth + '" height="' + svgHeight + '">\r\n' + svgElement + '\r\n</svg>';
    $("#embedHtmlDiv").removeClass("hidden");
    $("#embedHtmlText").val(svgHtml);

    // ...and scroll to the text area element into view.
    // https://stackoverflow.com/a/5909328/446681
    $('html, body').animate({
      scrollTop: $(document).height()-$(window).height()},
      1400,
      "swing"
    );
    return false;
  }


  function nodeColor(d, i) {
    if (d.level == 0) {
      return "#1f77b4"; // blue
    } else if(d.level ==1) {
      return "#6ebced"; // light blue
    }
    return "#92eace"; // lighter blue
  }

  function drawGraphInit(data, status) {
    theData = data;
    drawGraph();
  }

  function drawGraph() {
    var data = theData;
    $("#loadingMsg").addClass("hidden");

    if (level1Hidden) {
      $("#level1Hide").addClass("hidden");
      $("#level1Show").removeClass("hidden");
      $("#level2Legend").addClass("hidden");
      // $("#level2Hide").addClass("hidden");
      // $("#level2Show").addClass("hidden");
    } else if (level2Hidden) {
      $("#level2Legend").removeClass("hidden");
      $("#level1Hide").removeClass("hidden");
      $("#level1Show").addClass("hidden");
      $("#level2Hide").addClass("hidden");
      $("#level2Show").removeClass("hidden");
    } else {
      $("#level2Legend").removeClass("hidden");
      $("#level1Hide").removeClass("hidden");
      $("#level1Show").addClass("hidden");
      $("#level2Hide").removeClass("hidden");
      $("#level2Show").addClass("hidden");
    }

    if (data.links === undefined || data.links.length == 0) {
      $("#errorMsg").removeClass("hidden");
    }

    var i;
    var svg = d3.select("svg");
    svg.selectAll("*").remove();

    var w = +svg.attr("width");
    var h = +svg.attr("height");
    var dataset = {nodes: [], edges: []};
    var sourceIndex, targetIndex;
    var visibleNodes = [];
    var j;
    var notOrphans = [];

    // Calculate what nodes should be visible based on the show/include collaborators
    // and collaborators' collaborators checkboxes
    for (i=0; i < data.nodes.length; i++) {
      var level = data.nodes[i].level;
      var valid = true;
      if (level2Hidden) {
        valid = level < 2;
      } if (level1Hidden) {
        valid = level < 1;
      }
      if (valid) {
        visibleNodes.push(data.nodes[i]);
      }
    }

    if (showOrphans) {
      dataset.nodes = visibleNodes;
    } else {
      // Find non-orphan nodes and only show those.
      for(i = 0; i < visibleNodes.length; i++) {
        for(j = 0; j < data.links.length; j++) {
          if (data.links[j].source == visibleNodes[i].id || data.links[j].target == visibleNodes[i].id) {
            notOrphans.push(visibleNodes[i]);
            break;
          }
        }
      }
      dataset.nodes = notOrphans;
    }

    // Calculate the edges from the data
    for(i = 0; i < data.links.length; i++) {
      // Notice that we use the nodes from the *dataset* (which includes only
      // nodes that we want to display) but use the links from the *data*
      // (which includes the original)
      sourceIndex = getNodeIndex(dataset.nodes, data.links[i].source);
      targetIndex = getNodeIndex(dataset.nodes, data.links[i].target);
      if ((sourceIndex != -1) && (targetIndex != -1)) {
        obj = {source: sourceIndex, target: targetIndex};
        dataset.edges.push(obj);
      }
    }

    numberOfNodes = dataset.nodes.length;

    var colors = d3.scaleOrdinal(d3.schemeCategory10);

    var simulation = d3.forceSimulation(dataset.nodes)
      .force("center", d3.forceCenter(w/2, h/2));

    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      if (numberOfNodes > 40) {
        // don't use forceManyBody() to help keep the graph tight.
      } else {
        simulation.force("charge", d3.forceManyBody().strength(-10));
      }
      simulation.force("link", d3.forceLink(dataset.edges));
    } else {
      // "forceManyBody causes all elements to attract or repel one another.
      // The strength of the attraction or repulsion can be set using .strength()
      // where a positive value will cause elements to attract one another while a
      // negative value causes elements to repel each other. The default value is -30.
      // [...]
      // As a rule of thumb, when creating network diagrams we want the elements
      // to repel one another while for visualisations where we’re clumping
      // elements together, attractive forces are necessary."
      // -- Source: http://d3indepth.com/force-layout/
      if (numberOfNodes > 40) {
        simulation.force("charge", d3.forceManyBody().strength(0));
      } else {
        simulation.force("charge", d3.forceManyBody().strength(-30));
      }
      simulation.force("link", d3.forceLink(dataset.edges).distance(function(d) {return 100;}).strength(0.1))
    }

    var edges = svg.selectAll("line")
      .data(dataset.edges)
      .enter()
      .append("line")
      .style("stroke", "#ccc")
      .style("stroke-width", 1);

    var dragstarted = function(d) {
      if (!d3.event.active) {
        simulation.alphaTarget(0.3).restart();
      }
      d.fx = d.x;
      d.fy = d.y;
    }

    var dragged = function(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    var dragended = function (d) {
      if ($("#forceToFit").prop("checked") == true) {
        $("#forceToFit").attr("checked", false);
      }
    }

    var nodes = svg.selectAll("g")
      .data(dataset.nodes)
      .enter()
      .append("g")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    nodes.append("circle")
      .attr("r", function(d) {
        if (numberOfNodes > 100) {
          if (d.level == 0) {
            return 5;
          } else {
            return 3;
          }
        }

        if (numberOfNodes > 40) {
          if (d.level == 0) {
            return 7;
          } else {
            return 5;
          }
        }

        if (d.level == 0) {
          return 9;
        } else if(d.level == 1) {
          return 7;
        }
        return 5;
      })
      .style("fill", nodeColor);

    nodes.on('mouseover', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        // https://stackoverflow.com/a/24041991/446681
        var matrix = this.getScreenCTM().translate(+ this.getAttribute("cx"), + this.getAttribute("cy"));
        var xPos = window.pageXOffset + matrix.e + 15;
        var yPos = window.pageYOffset + matrix.f - 30;
        d3.select("#tooltip")
          .style("left", xPos + "px")
          .style("top", yPos + "px")
          .select("#title")
          .text(d.name);
        d3.select("#subtitle").text(d.group);
        d3.select("#subtitle2").classed("hidden", false).text("Click to view " + d.name + "'s profile");
        d3.select("#tooltip").classed("hidden", false);
      } else {
          d3.select(this).select('text')
            .style("font-weight", "bold")
            .style("font-size", "12px");
      }
      d3.select(this).select('circle').style("fill", "#ffbb78");
    });

    nodes.on('mouseout', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        d3.select("#tooltip").classed("hidden", true);
      } else {
        d3.select(this).select('text')
          .style("font-weight", "normal")
          .style("font-size", "10px");
      }
      d3.select(this).select('circle').style("fill", nodeColor(d, 0));
    });

    nodes.on('click', function(d){
      var shortId = d.id.substring(d.id.lastIndexOf("/")+1);
      var newUrl = researcherUrl.replace("placeholder", shortId);
      window.location.assign(newUrl);
    });

    nodes.selectAll("circle").on('mouseout', function(d){
      d3.select(this).style("fill", nodeColor(d, 0));
    });

    nodes.append("text")
      .style("font-size", function(d) { return d.level == -10 ? "12px" : "8px"; })
      .style("font-weight", function(d) { return d.level == -10 ? "bold" : "normal"; })
      .attr("class", "node-text")
      .text(function(d) { return d.name; });

    simulation.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      nodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
      });
    });

    updateLabels();
  } // function drawGraph() {

</script>
