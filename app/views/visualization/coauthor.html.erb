<% @page_title = (@presenter.faculty.name || "") + " Coauthor network"%>

<%= render "visualization/viz_style" %>
<%= render "visualization/viz_javascript" %>
<%= render "search_box" %>

<h1 class="researcherName"><%= @presenter.faculty.display_name %></h1>
<h4>Coauthor Network</h4>

<div class="row">
  <div class="col-md-9">
    <div id="descriptionMsg">
      The coauthor network is created with the information available for this
      researcher under the
      <a href="<%= display_show_path(@presenter.faculty.vivo_id) %>#Publications">Publications tab of their profile</a>.
      Only publications where more than one researcher at Brown has confirmed authorship
      are considered in this network.
    </div>
    <div id="errorMsg" class="alert alert-danger hidden" role="alert">
      <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
      <span class="sr-only">Error:</span>
      No coauthor data is available for this researcher.
    </div>
    <svg id="svgElement" width="960" height="700" xmlns="http://www.w3.org/2000/svg"></svg>
  </div>
  <div class="col-md-3">
    <a class="btn btn-primary btn-lg" role="button" href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id) %>" >Coauthor Network</a>
    <a class="btn btn-default btn-lg" role="button" href="<%= visualization_collab_path(@presenter.faculty.vivo_id) %>" >Collaborator Network</a>
    <p>&nbsp;</p>
    <div id="legend">
    <p><b>Legend</b></p>
    <ul id="legendList" class="legend">
      <!-- added via JavaScript -->
    </ul>
    </div>
    <p><b>Options</b></p>
    <p><a href="<%= display_show_path(@presenter.faculty.vivo_id) %>">View Researcher's Profile</a></p>

    <p><a href="#" id="showMore" class="hidden" title="Include coauthors and their coauthors.">Show more coauthors</a></p>
    <p><a href="#" id="showLess" title="Include only coauthors.">Show less coauthors</a></p>

    <p>Display labels&nbsp;<input id="showLabels" type="checkbox" checked/></p>
    <p>Display details on mouse hover&nbsp;<input id="showDetails" type="checkbox" checked/></p>
    <p>Force to fit&nbsp;<input id="forceToFit" type="checkbox" title="Forces the graph to fit on the screen (useful when some nodes fall outside the display area)"/></p>
    <p><a href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id, format: :csv) %>"
      title="Format suitable for Excel and other tools."
      target="_blank">Download data (CSV)</a></p>
    <p><a href="<%= visualization_coauthor_path(@presenter.faculty.vivo_id, format: :json) %>"
      title="Format suitable for D3 and other visualization tools."
      target="_blank">Download data (JSON)</a></p>
    <p><a href="#" id="embedHtml" title="Shows HTML to embed the graph as an SVG element into your own page.">Embed SVG Code</a></p>
    <p><a href="#" id="downloadPng" title="Downlods the graph as an image file in PNG format. This only works in Chrome and Firefox.">Download Image (PNG)</a></p>
  </div>
</div>

<div class="row hidden" id="canvasDiv">
  <canvas id="canvasElement"></canvas>
  <a id="canvasImgLink" href="#" download="coauthors.png" target="_blank"></a>
</div>

<div class="row hidden" id="embedHtmlDiv">
  <div class="col-md-12">
    <p>Copy the following HTML to embed the SVG into your own page</p>
    <textarea id="embedHtmlText" rows="15" class="htmlSnippet"></textarea>
  </div>
  <div><p>&nbsp;</p></div>
</div>

<div id="tooltip" class="hidden">
  <p id="title" style="margin:0;"></p>
  <p id="subtitle" style="margin:0;"></p>
  <p id="subtitle2" style="margin:0;"></p>
</div>

<script>

  var facultyId = "<%= @presenter.faculty.id %>";     // http://vivo.brown.edu/jcarberry
  var vivoId = "<%= @presenter.faculty.vivo_id %>";   // jcarberry
  var json_data_addr = "<%= visualization_coauthor_path(@presenter.faculty.vivo_id, format: :json) %>";
  var svgWidth = 960;
  var svgHeight = 700;
  var showMore = true;

  $(document).ready(function() {
    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      $("#forceToFit").attr("checked", true);
    }

    initGraph();

    $("#showMore").on("click", function() { showMore = true; initGraph(); return false; });
    $("#showLess").on("click", function() { showMore = false; initGraph(); return false;});

    $("#showLabels").on("click", updateLabels);
    $("#forceToFit").on("click", function() {
      var checked = $("#forceToFit").is(":checked");
      var newUrl = "<%= visualization_coauthor_path(@presenter.faculty.vivo_id)%>";
      if (checked) {
        newUrl += "?fit=1";
      }
      window.location.assign(newUrl);
    });

    $("#embedHtml").on("click", function() {
      showEmbedHtml("svgElement", svgWidth, svgHeight, "embedHtmlDiv", "embedHtmlText");
    });

    $("#downloadPng").on("click", function() {
      downloadPng("svgElement", svgWidth, svgHeight,
        "canvasElement", "canvasImgLink", "coauthors_" + vivoId + ".png");
    });
  });

  function initGraph() {
    $.getJSON(json_data_addr, drawGraph);
  }

  function updateLabels() {
    var showLabels = $("#showLabels").is(":checked");
    if (showLabels) {
      d3.selectAll(".node-text").classed("hidden",false);
    } else {
      d3.selectAll(".node-text").classed("hidden",true);
    }
  }

  // Calculates the edges from the links in the data
  // Links point to nodes by ID where as edges points to them by index.
  function calculateEdges(nodes, links) {
    var i, obj;
    var edges = []
    for(i = 0; i < links.length; i++) {
      obj = {
        source: getNodeIndex(nodes, links[i].source),
        target: getNodeIndex(nodes, links[i].target)
      };
      if ((obj.source != -1) && (obj.target != -1)) {
        edges.push(obj);
      }
    }
    return edges;
  }

  // Sets the level for each node based on the information on the links array.
  //
  // `nodes` is an array of objects, each object is expected to have an `id` property.
  // `links` is an array of objects, each object is expected to be in the form:
  // {source: node-id, target: other-node-id}
  // `rootId` represents the `id` of the root node.
  function setNodeLevels(nodes, links, rootId) {
    var i;
    var edge;
    var firstLevelNodes = [];

    // set all nodes to level 2 initially:
    //    level 0 - author
    //    level 1 - coauthor
    //    level 2 - coauthor's coauthor
    for(i = 0; i < nodes.length; i++) {
      nodes[i].level = 2;
    }

    // find first level nodes (nodes connected to the root)
    for(i = 0; i < links.length; i++) {
      link = links[i];
      if (link.source == rootId) {
        firstLevelNodes.push(link.target);
      } else if (link.target == rootId) {
        firstLevelNodes.push(link.source);
      }
    }

    // mark the first level nodes (and the root node) with the proper level
    for(i = 0; i < nodes.length; i++) {
      if(nodes[i].id == rootId) {
        nodes[i].level = 0;
      } else if(inArray(firstLevelNodes, nodes[i].id)) {
        nodes[i].level = 1;
      }
    }

    return nodes;
  }

  function datasetByLevel(nodes, edges, links, showLevel) {
    if (showLevel == 2) {
      return {nodes: nodes, edges: edges};
    }

    // showLevel 0 or 1
    var i;
    var visibleNodes = [];
    for(i = 0; i < nodes.length; i++) {
      if (nodes[i].level <= showLevel) {
        visibleNodes.push(nodes[i]);
      }
    }

    // recalculate the edges
    edges = calculateEdges(visibleNodes, links)
    return {nodes: visibleNodes, edges: edges};
  }

  function groupsFromNodes(nodes) {
    var i, groupName;
    var groups = [];
    for(i = 0; i < nodes.length; i++) {
      groupName = nodes[i].group;
      if (groupName == "") {
        groupName = "N/A"
      }
      if (!inArray(groups, groupName)){
        groups.push(groupName)
      }
    }
    groups.sort();
    return groups;
  }

  // The data array contains the `nodes` and `links` for the coauthor graph.
  function drawGraph(data, status) {

    if (data.links === undefined || data.links.length == 0) {
      $("#errorMsg").removeClass("hidden");
    }

    if (showMore) {
      $("#showMore").addClass("hidden");
      $("#showLess").removeClass("hidden");
    } else {
      $("#showMore").removeClass("hidden");
      $("#showLess").addClass("hidden");
    }

    var i;
    var svg = d3.select("svg");
    svg.selectAll("*").remove();

    var w = +svg.attr("width");
    var h = +svg.attr("height");

    var nodes = setNodeLevels(data.nodes, data.links, facultyId);
    var edges = calculateEdges(nodes, data.links);
    var showLevel = showMore ? 2 : 1;
    var dataset = datasetByLevel(nodes, edges, data.links, showLevel);

    var colorByDepth = window.location.href.indexOf("?depth") != -1;;
    var colorScheme;
    var nodeColor;
    if (colorByDepth) {
      nodeColor = function (d) {
        if (d.level == 0) {
          return level0Color;
        } else if(d.level ==1) {
          return level1Color;
        }
        return level2Color;
      }
    } else {
      colorScheme = d3.scaleOrdinal(d3.schemeCategory10);
      nodeColor = function (d) {
        return colorScheme(d.group);
      }
    }

    var ul = $("#legendList");
    ul.empty();
    if (colorByDepth) {
      ul.append('<li><span class="level0">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Researcher');
      ul.append('<li><span class="level1">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Coauthors');
      ul.append('<li><span class="level2">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;Coauthors\' coauthors');
    } else {
      var groupColor, groupName;
      var groups = groupsFromNodes(dataset.nodes);
      for(i = 0; i < groups.length; i++) {
        groupName = groups[i];
        groupColor = colorScheme(groupName);
        ul.append('<li><span style="background-color: ' + groupColor + ';">&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;' + groupName);
      }
    }

    var force = d3.forceSimulation(dataset.nodes)
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(w/2, h/2));

    var forceToFit = window.location.href.indexOf("?fit") != -1;
    if (forceToFit) {
      force.force("link", d3.forceLink(dataset.edges));
    } else {
      force.force("link", d3.forceLink(dataset.edges).distance(function(d) {return 100;}).strength(0.1))
    }

    var edges = svg.selectAll("line")
      .data(dataset.edges)
      .enter()
      .append("line")
      .style("stroke", "#ccc")
      .style("stroke-width", 1);

    var dragstarted = function(d) {
      if (!d3.event.active) force.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    var dragged = function(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    var dragended = function (d) {
      if ($("#forceToFit").prop("checked") == true) {
        $("#forceToFit").attr("checked", false);
      }
    }

    var nodes = svg.selectAll("g")
      .data(dataset.nodes)
      .enter()
      .append("g")
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    nodes.append("circle")
      .attr("r", function(d) {
        if (d.level == 0) {
          return 15;
        } else if(d.level == 1) {
          return 11;
        }
        return 6;
      })
      .style("fill", nodeColor);

    nodes.on('mouseover', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        // https://stackoverflow.com/a/24041991/446681
        var matrix = this.getScreenCTM().translate(+ this.getAttribute("cx"), + this.getAttribute("cy"));
        var xPos = window.pageXOffset + matrix.e + 15;
        var yPos = window.pageYOffset + matrix.f - 30;
        d3.select("#tooltip")
          .style("left", xPos + "px")
          .style("top", yPos + "px")
          .select("#title")
          .text(d.name);
        d3.select("#subtitle").text(d.group);
        if (d.level == 0) {
          d3.select("#subtitle2").classed("hidden", true);
        } else {
          d3.select("#subtitle2").classed("hidden", false).text("Click to view " + d.name + "'s coauthors");
        }
        d3.select("#tooltip").classed("hidden", false);
      } else {
          d3.select(this).select('text')
            .style("font-weight", "bold")
            .style("font-size", "12px");
      }
      d3.select(this).select('circle').style("stroke", "#ffbb78").style("stroke-width", "3");
    });

    nodes.on('mouseout', function(d){
      var showDetails = $("#showDetails").is(":checked");
      if(showDetails) {
        d3.select("#tooltip").classed("hidden", true);
      } else {
        d3.select(this).select('text')
          .style("font-weight", "normal")
          .style("font-size", "10px");
      }
      d3.select(this).select('circle').style("stroke", nodeColor(d)).style("stroke-width", "3");
    });

    nodes.on('click', function(d){
      if (d.level == 0) {
        // do nothing
      } else {
        var shortId = d.id.substring(d.id.lastIndexOf("/")+1);
        var currentSegment = "/display/" + vivoId + "/viz/";
        var newSegment = "/display/" + shortId + "/viz/";
        var newUrl = window.location.toString().replace(currentSegment, newSegment);
        window.location.assign(newUrl);
      }
    });

    nodes.selectAll("circle").on('mouseout', function(d){
      d3.select(this).style("fill", nodeColor(d));
    });

    nodes.append("text")
      .style("font-size", function(d) { return d.level == 0 ? "12px" : "8px"; })
      .style("font-weight", function(d) { return d.level == 0 ? "bold" : "normal"; })
      .attr("class", "node-text")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      edges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; })
      nodes.attr("transform", function(d) {
        return 'translate(' + [d.x, d.y] + ')';
      });
    });

    updateLabels();
  } // function drawGraph() {

</script>
