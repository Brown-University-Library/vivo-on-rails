<script type="text/javascript">
// Common functions used in the visualizations

var level0Color = "#1f77b4";
var level1Color = "#aec7e8";
var level2Color = "#92eace";

// Returns true if the value indicates exists in the array.
function inArray(array, value) {
  var i;
  for(i = 0; i < array.length; i++) {
    if (array[i] == value) {
      return true;
    }
  }
  return false;
}

// Returns the index where the requested ID was found in the nodes array.
function getNodeIndex(nodes, id) {
  var i;
  for(i = 0; i < nodes.length; i++) {
    if (nodes[i].id == id) {
      return i;
    }
  }
  return -1;
}

function downloadPng(svgId, svgWidth, svgHeight, canvasId, linkId, fileName) {
  // The process to download the graphic in the SVG element as an image file
  // is a far more complicated than it looks on the surface. The general
  // process is as follows:
  //
  //  1. Create an HTML IMG element using the raw SVG as its source.
  //  2. Add this image to an HTML canvas.
  //  3. Use the canvas.toBlob() to create binary image (image/png)
  //     out of the SVG that we created on step 1.
  //  4. Force the download of the binary image.
  //
  // Source: http://dinbror.dk/blog/how-to-download-an-inline-svg-as-jpg-or-png/
  var svgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="' + svgWidth + '" height="' + svgHeight + '">\r\n' +
    '<rect width="100%" height="100%" fill="white"/>\r\n' +
    $("#" + svgId).html() + '\r\n' +
    '</svg>';
  var svgRaw = "data:image/svg+xml," + encodeURIComponent(svgHtml);

  var canvas = document.getElementById(canvasId);
  canvas.setAttribute("width", svgWidth);
  canvas.setAttribute("height", svgHeight);

  var ctx = canvas.getContext("2d");
  var svgImage = new Image();

  svgImage.onload = function () {
    // Draw the SVG image inside the canvas
    ctx.drawImage(svgImage, 0, 0, svgWidth, svgHeight);

    // Generate a binary version of the canvas
    canvas.toBlob(function (blob) {
      url = URL.createObjectURL(blob);

      // Tell the browser that is safe to garbage collect the created blob
      // once it has been loaded.
      var pngImg = document.createElement("img");
      pngImg.onload = function () { URL.revokeObjectURL(url); };
      pngImg.src = url;

      // Set the blob URL as the target of our HTML anchor tag...
      var a = document.getElementById(linkId);
      a.setAttribute("download", fileName);
      a.setAttribute("href", url);

      // ...and force a click event on the HTML anchor tag
      // (this is what prompts the user to safe the image.)
      var clickEvent = new MouseEvent("click", {
        "view": window,
        "bubbles": true,
        "cancelable": true
      });
      a.dispatchEvent(clickEvent);
    }, "image/png", 1);
  }

  svgImage.src = svgRaw;
  return false;
}

function showEmbedHtml(svgId, svgWidth, svgHeight, divId, textId) {
  // Dump the HTML to a text area element...
  var svgHtml = '<svg width="' + svgWidth + '" height="' + svgHeight + '">\r\n' +
    $("#" + svgId).html() + '\r\n' +
    '</svg>';
  $("#" + divId).removeClass("hidden");
  $("#" + textId).val(svgHtml);

  // ...and scroll to the text area element into view.
  // https://stackoverflow.com/a/5909328/446681
  $('html, body').animate({
    scrollTop: $(document).height()-$(window).height()},
    1400,
    "swing"
  );
  return false;
}
</script>
